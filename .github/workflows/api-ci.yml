name: API CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: [ 'api/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'api/**' ]

env:
  NODE_VERSION: '18'
  WORKING_DIRECTORY: './api'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

    - name: Install dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm ci

    - name: Run linting
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm run lint

    - name: Run type checking
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npx tsc --noEmit

    - name: Setup test database
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        # Apply database migrations
        PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -f sql/enable_pgvector.sql
        PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -f sql/migration_001_enable_vector_search.sql
        PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -f sql/migration_002_vector_functions.sql
        PGPASSWORD=postgres psql -h localhost -U postgres -d test_db -f sql/migration_003_marketplace_tables.sql
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

    - name: Run tests
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET: test-secret-key-for-ci-cd-pipeline
        SUPABASE_URL: http://localhost:54321
        SUPABASE_SERVICE_KEY: test-service-key

    - name: Build application
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm run build

    - name: Test marketplace setup
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: node test-marketplace-setup.js
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET: test-secret-key-for-ci-cd-pipeline

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm ci

    - name: Run security audit
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm audit --audit-level=moderate

    - name: Check for vulnerabilities
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npx audit-ci --moderate

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm ci

    - name: Build application
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm run build

    # Add your staging deployment steps here
    # Example for Vercel, Railway, or other platforms
    - name: Deploy to Staging
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: echo "Deploy to staging environment"
      # Example: npx vercel --token ${{ secrets.VERCEL_TOKEN }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://platform.oriva.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm ci --only=production

    - name: Build application
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm run build

    # Add your production deployment steps here
    - name: Deploy to Production
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: echo "Deploy to production environment"
      # Add actual deployment commands here

    - name: Health check
      run: |
        sleep 30  # Wait for deployment to complete
        curl -f https://platform.oriva.com/healthz || exit 1

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ Production deployment successful"
          # Add Slack/Discord notification here
        else
          echo "❌ Production deployment failed"
          # Add failure notification here
        fi