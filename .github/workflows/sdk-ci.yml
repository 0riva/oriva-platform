name: Plugin SDK CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths: [ 'packages/plugin-sdk/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'packages/plugin-sdk/**' ]

env:
  NODE_VERSION: '18'
  WORKING_DIRECTORY: './packages/plugin-sdk'

jobs:
  test:
    name: Test SDK
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

    - name: Install dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm ci

    - name: Run linting
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm run lint

    - name: Run type checking
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npx tsc --noEmit

    - name: Run tests
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm test

    - name: Build SDK
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm run build

    - name: Test package installation
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm pack --dry-run

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: 'https://registry.npmjs.org'

    - name: Install dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm ci

    - name: Build SDK
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: npm run build

    - name: Check version
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        NPM_VERSION=$(npm view @oriva/plugin-sdk version 2>/dev/null || echo "0.0.0")
        if [ "$PACKAGE_VERSION" != "$NPM_VERSION" ]; then
          echo "VERSION_CHANGED=true" >> $GITHUB_ENV
          echo "New version detected: $PACKAGE_VERSION (current: $NPM_VERSION)"
        else
          echo "VERSION_CHANGED=false" >> $GITHUB_ENV
          echo "Version unchanged: $PACKAGE_VERSION"
        fi

    - name: Publish to NPM
      working-directory: ${{ env.WORKING_DIRECTORY }}
      if: env.VERSION_CHANGED == 'true'
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}