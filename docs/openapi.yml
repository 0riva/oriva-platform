openapi: 3.0.3
info:
  title: Oriva Platform API
  description: |
    RESTful API for the Oriva social network platform. This API provides secure access to Oriva's core functionality for building social apps and extensions.
    
    ## üîí Privacy-First Design
    
    Oriva's multi-profile and group system is built with **privacy by design** principles to protect user data and prevent cross-profile linking:
    
    ### üõ°Ô∏è Profile Privacy Protection
    
    **Data Isolation**: Each profile appears as a completely separate entity to extensions:
    - **Sanitized IDs**: All profile IDs are prefixed with `ext_` and contain no internal Oriva Core identifiers
    - **No Cross-Profile Linking**: Extensions cannot determine if two profiles belong to the same user
    - **Minimal Data Exposure**: Only essential profile information is exposed (name, active status)
    - **User-Controlled Access**: Users explicitly authorize which profiles each extension can access
    
    **Profile Switching**: When users switch profiles within an extension:
    - **Complete Context Switch**: All profile data is immediately replaced
    - **No Data Persistence**: Previous profile data is not accessible
    - **Isolated Sessions**: Each profile operates in complete isolation
    
    ### üë• Group Privacy Protection
    
    **Member Anonymization**: Group member data is carefully sanitized:
    - **Sanitized Member IDs**: All member IDs use `ext_member_` prefix with no internal identifiers
    - **Display Names Only**: Only display names are shown, no usernames or internal IDs
    - **No User Linking**: Extensions cannot link group members to user accounts
    - **Role-Based Access**: Only necessary role information is exposed
    
    **Group Visibility**: Extensions only see groups the user has explicitly authorized:
    - **User Authorization Required**: Each group requires explicit user permission
    - **Granular Control**: Users can authorize specific groups per extension
    - **Revocable Access**: Users can revoke group access at any time
    
    ### üîê Technical Privacy Measures
    
    **ID Sanitization Process**:
    1. **Internal IDs**: Oriva Core uses internal UUIDs for all entities
    2. **Hash Generation**: Internal IDs are hashed with extension-specific salts
    3. **External IDs**: Hashed values are prefixed (`ext_`, `ext_member_`) for external use
    4. **No Reversibility**: External IDs cannot be reversed to internal IDs
    
    **Data Minimization**:
    - **Only Required Fields**: Extensions receive only the minimum data necessary
    - **No Metadata**: No creation dates, internal timestamps, or system metadata
    - **No Relationships**: No information about relationships between entities
    
    **Access Control**:
    - **Extension-Specific Permissions**: Each extension has isolated permission sets
    - **User Consent**: All access requires explicit user authorization
    - **Audit Trail**: All access is logged for privacy compliance
    
    ## üîë Requesting Profile and Group Access
    
    To access user profiles and groups, developers must follow Oriva's privacy-first authorization flow:
    
    ### üìã Step 1: Declare Required Permissions
    
    In your app's manifest, declare the permissions you need:
    
    ```json
    {
      "permissions": [
        "profiles:read",
        "profiles:write", 
        "groups:read",
        "groups:write"
      ]
    }
    ```
    
    ### üë§ Step 2: User Authorization Flow
    
    When a user installs your extension:
    
    1. **Permission Request**: Oriva Core shows the user what data your app wants to access
    2. **Profile Selection**: User chooses which profiles your app can access (e.g., "Work Profile" but not "Dating Profile")
    3. **Group Selection**: User chooses which groups your app can access
    4. **Granular Control**: User can authorize different profiles/groups for different apps
    
    ### üîÑ Step 3: Dynamic Authorization
    
    Users can modify permissions at any time:
    - **Add Access**: Grant access to additional profiles/groups
    - **Revoke Access**: Remove access to specific profiles/groups
    - **Complete Revocation**: Remove all access to your app
    
    ### üì± Step 4: Using the API
    
    Once authorized, your app can:
    
    ```javascript
    // Get available profiles (only those user authorized)
    const profiles = await fetch('/api/v1/profiles/available', {
      headers: { 'Authorization': 'Bearer your-api-key' }
    });
    
    // Switch to a specific profile
    await fetch('/api/v1/profiles/profile_123/activate', {
      method: 'POST',
      headers: { 'Authorization': 'Bearer your-api-key' }
    });
    
    // Get user's groups (only those user authorized)
    const groups = await fetch('/api/v1/groups', {
      headers: { 'Authorization': 'Bearer your-api-key' }
    });
    ```
    
    ### ‚ö†Ô∏è Important Privacy Notes
    
    - **No Cross-Profile Linking**: You cannot determine if two profiles belong to the same user
    - **Sanitized Data**: All IDs are prefixed and cannot be linked to internal Oriva data
    - **User Control**: Users can revoke access at any time
    - **Audit Trail**: All access is logged for privacy compliance
    
    ## Authentication
    
    All requests require authentication using API key:
    - **API Key**: Use `Authorization: Bearer <api-key>` header
    
    ## Rate Limiting
    
    API endpoints are rate-limited to ensure fair usage:
    - **Core API**: 5,000 requests per hour
    - **Marketplace**: 1,000 requests per hour
    - **Webhooks**: 10,000 requests per hour
    
    ## Permissions
    
    Apps must declare required permissions in their manifest. Available permissions:
    - `entries:read` - Read user entries
    - `entries:write` - Create and update entries
    - `entries:delete` - Delete entries
    - `templates:read` - Read templates
    - `templates:write` - Create and update templates
    - `user:read` - Read user information
    - `user:write` - Update user information
    - `profiles:read` - Read authorized user profiles
    - `profiles:write` - Switch between authorized profiles
    - `groups:read` - Read user group memberships
    - `groups:write` - Access group member information
    - `ui:notifications` - Show notifications
    - `ui:modals` - Display modals
    - `ui:navigation` - Navigate between screens
    - `storage:read` - Read app-specific data
    - `storage:write` - Write app-specific data
  version: 1.0.0
  contact:
    name: Oriva Developer Support
    url: https://github.com/0riva/oriva-platform
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.oriva.io
    description: Production server
  - url: http://localhost:3001
    description: Development server

security:
  - ApiKeyAuth: []
  - AdminTokenAuth: []

paths:
  /health:
    get:
      summary: Health check
      description: Check if the API is healthy and operational
      tags:
        - System
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: 1.0.0

  /api/v1/dev/generate-key:
    post:
      summary: Generate API key
      description: Generate a new API key for development or production use
      tags:
        - Developer
      security:
        - AdminTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - appName
              properties:
                appName:
                  type: string
                  description: Name of the application
                  example: "My Awesome App"
                type:
                  type: string
                  enum: [test, live]
                  default: test
                  description: Type of API key
      responses:
        '200':
          description: API key generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      apiKey:
                        type: string
                        example: "oriva_pk_test_1234567890abcdef"
                      appName:
                        type: string
                        example: "My Awesome App"
                      type:
                        type: string
                        example: "test"
                      createdAt:
                        type: string
                        format: date-time
        '401':
          description: Unauthorized - Invalid admin token
        '429':
          description: Rate limit exceeded

  /api/v1/dev/keys:
    get:
      summary: List API keys
      description: List all API keys (shows partial keys for security)
      tags:
        - Developer
      security:
        - AdminTokenAuth: []
      responses:
        '200':
          description: List of API keys
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        key:
                          type: string
                          example: "oriva_pk_test_1234567890..."
                        appName:
                          type: string
                          example: "My Awesome App"
                        type:
                          type: string
                          example: "test"
                        createdAt:
                          type: string
                          format: date-time
                        lastUsed:
                          type: string
                          format: date-time
                        isActive:
                          type: boolean
                          example: true
        '401':
          description: Unauthorized - Invalid admin token
        '429':
          description: Rate limit exceeded

  /api/v1/dev/revoke-key:
    post:
      summary: Revoke API key
      description: Revoke an existing API key
      tags:
        - Developer
      security:
        - AdminTokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - apiKey
              properties:
                apiKey:
                  type: string
                  description: The API key to revoke
                  example: "oriva_pk_test_1234567890abcdef"
      responses:
        '200':
          description: API key revoked successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "API key revoked successfully"
        '401':
          description: Unauthorized - Invalid admin token
        '404':
          description: API key not found
        '429':
          description: Rate limit exceeded

  /api/v1/entries:
    get:
      summary: Get entries
      description: Retrieve user entries with filtering and pagination
      tags:
        - Entries
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of entries per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          description: Filter by entry status
          schema:
            type: string
            enum: [draft, scheduled, published, all]
        - name: audience
          in: query
          description: Filter by audience type
          schema:
            type: string
            enum: [public, private, shared, all]
        - name: search
          in: query
          description: Search in title and content
          schema:
            type: string
            maxLength: 100
        - name: templateId
          in: query
          description: Filter by template ID
          schema:
            type: string
        - name: sortBy
          in: query
          description: Sort field
          schema:
            type: string
            enum: [createdAt, updatedAt, title]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: List of entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Entry'
                  success:
                    type: boolean
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      summary: Create entry
      description: Create a new entry
      tags:
        - Entries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEntryRequest'
      responses:
        '201':
          description: Entry created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Entry'
                  success:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/v1/entries/{id}:
    get:
      summary: Get entry by ID
      description: Retrieve a specific entry by its ID
      tags:
        - Entries
      parameters:
        - name: id
          in: path
          required: true
          description: Entry ID
          schema:
            type: string
      responses:
        '200':
          description: Entry details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Entry'
                  success:
                    type: boolean
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    put:
      summary: Update entry
      description: Update an existing entry
      tags:
        - Entries
      parameters:
        - name: id
          in: path
          required: true
          description: Entry ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEntryRequest'
      responses:
        '200':
          description: Entry updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Entry'
                  success:
                    type: boolean
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    delete:
      summary: Delete entry
      description: Delete an entry permanently
      tags:
        - Entries
      parameters:
        - name: id
          in: path
          required: true
          description: Entry ID
          schema:
            type: string
      responses:
        '200':
          description: Entry deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: null
                  success:
                    type: boolean
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/v1/entries/stats:
    get:
      summary: Get entry statistics
      description: Get entry statistics for the current user
      tags:
        - Entries
      responses:
        '200':
          description: Entry statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      total:
                        type: integer
                      published:
                        type: integer
                      drafts:
                        type: integer
                      scheduled:
                        type: integer
                  success:
                    type: boolean

  /api/v1/templates:
    get:
      summary: Get templates
      description: Retrieve available templates
      tags:
        - Templates
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of templates per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: category
          in: query
          description: Filter by template category
          schema:
            type: string
        - name: search
          in: query
          description: Search in template name and description
          schema:
            type: string
      responses:
        '200':
          description: List of templates
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Template'
                  success:
                    type: boolean
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: '#/components/schemas/Pagination'

    post:
      summary: Create template
      description: Create a new template
      tags:
        - Templates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemplateRequest'
      responses:
        '201':
          description: Template created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Template'
                  success:
                    type: boolean

  /api/v1/templates/{id}:
    get:
      summary: Get template by ID
      description: Retrieve a specific template by its ID
      tags:
        - Templates
      parameters:
        - name: id
          in: path
          required: true
          description: Template ID
          schema:
            type: string
      responses:
        '200':
          description: Template details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Template'
                  success:
                    type: boolean

    put:
      summary: Update template
      description: Update an existing template
      tags:
        - Templates
      parameters:
        - name: id
          in: path
          required: true
          description: Template ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTemplateRequest'
      responses:
        '200':
          description: Template updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Template'
                  success:
                    type: boolean

  /api/v1/user/me:
    get:
      summary: Get current user
      description: Get current user information
      tags:
        - User
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  success:
                    type: boolean

    put:
      summary: Update current user
      description: Update current user information
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  success:
                    type: boolean

  /api/v1/user/preferences:
    get:
      summary: Get user preferences
      description: Get user preferences for the current app
      tags:
        - User
      responses:
        '200':
          description: User preferences
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    additionalProperties: true
                  success:
                    type: boolean

    put:
      summary: Update user preferences
      description: Update user preferences for the current app
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Preferences updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    additionalProperties: true
                  success:
                    type: boolean

  # =============================================================================
  # PROFILE ENDPOINTS
  # =============================================================================

  /api/v1/profiles/available:
    get:
      summary: Get available profiles
      description: |
        Get list of profiles that the extension is authorized to access.
        
        **üîí Privacy Protection**: 
        - Only profiles explicitly authorized by the user are returned
        - All profile IDs are sanitized with `ext_` prefix to prevent internal ID exposure
        - No information is provided that could link profiles to the same user
        - Each profile appears as a completely separate entity
      tags:
        - Profiles
      responses:
        '200':
          description: List of authorized profiles
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Profile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/profiles/active:
    get:
      summary: Get active profile
      description: |
        Get the currently active profile for this extension session.
        
        **üîí Privacy Protection**:
        - Returns only the currently active profile, not all profiles
        - Profile ID is sanitized and cannot be linked to internal Oriva Core data
        - No historical information about profile switches is exposed
        - Returns null if no profile is currently active
      tags:
        - Profiles
      responses:
        '200':
          description: Currently active profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    oneOf:
                      - $ref: '#/components/schemas/Profile'
                      - type: null
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/profiles/{profileId}/activate:
    post:
      summary: Activate profile
      description: |
        Switch to a different authorized profile.
        
        **üîí Privacy Protection**:
        - Only works with profiles the user has explicitly authorized for this extension
        - Complete context switch - all previous profile data becomes inaccessible
        - No information about other profiles is exposed during the switch
        - Profile switching is logged for audit purposes but not exposed to extensions
        - Returns 403 Forbidden if attempting to access unauthorized profiles
      tags:
        - Profiles
      parameters:
        - name: profileId
          in: path
          required: true
          description: Profile ID to activate
          schema:
            type: string
            pattern: '^profile_\d+$'
            example: 'profile_123'
      responses:
        '200':
          description: Profile successfully activated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      activeProfile:
                        type: string
                        example: 'profile_123'
                      switchedAt:
                        type: string
                        format: date-time
                        example: '2024-01-15T10:30:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # =============================================================================
  # GROUP ENDPOINTS
  # =============================================================================

  /api/v1/groups:
    get:
      summary: Get user groups
      description: |
        Get list of groups that the user is a member of.
        
        **üîí Privacy Protection**:
        - Only returns groups the user has explicitly authorized for this extension
        - All group IDs are sanitized with `ext_` prefix to prevent internal ID exposure
        - No information about group ownership or creation is exposed
        - Member counts are provided but individual member details are not included
        - Users can revoke group access at any time through Oriva Core settings
      tags:
        - Groups
      responses:
        '200':
          description: List of user groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/groups/{groupId}/members:
    get:
      summary: Get group members
      description: |
        Get list of members in a specific group.
        
        **üîí Privacy Protection**:
        - Only works with groups the user has explicitly authorized for this extension
        - All member IDs are sanitized with `ext_member_` prefix to prevent internal ID exposure
        - Only display names are shown, no usernames or internal identifiers
        - No information is provided that could link members to user accounts
        - Member roles are shown but no administrative privileges are exposed
        - Returns 403 Forbidden if attempting to access unauthorized groups
      tags:
        - Groups
      parameters:
        - name: groupId
          in: path
          required: true
          description: Group ID to get members for
          schema:
            type: string
            pattern: '^group_\d+$'
            example: 'group_123'
      responses:
        '200':
          description: List of group members
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/GroupMember'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/v1/ui/notifications:
    post:
      summary: Show notification
      description: Display a notification to the user
      tags:
        - UI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, message]
              properties:
                title:
                  type: string
                  description: Notification title
                message:
                  type: string
                  description: Notification message
                type:
                  type: string
                  enum: [info, success, warning, error]
                  default: info
                duration:
                  type: integer
                  description: Duration in milliseconds
                  default: 5000
      responses:
        '200':
          description: Notification displayed
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                  success:
                    type: boolean

  /api/v1/ui/modals:
    post:
      summary: Show modal
      description: Display a modal dialog to the user
      tags:
        - UI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, content]
              properties:
                title:
                  type: string
                  description: Modal title
                content:
                  type: string
                  description: Modal content
                type:
                  type: string
                  enum: [info, confirm, alert]
                  default: info
      responses:
        '200':
          description: Modal displayed
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      result:
                        type: string
                  success:
                    type: boolean

  /api/v1/storage:
    get:
      summary: Get app data
      description: Retrieve data from your app's storage
      tags:
        - Storage
      parameters:
        - name: key
          in: query
          required: true
          description: Storage key
          schema:
            type: string
      responses:
        '200':
          description: App data retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    additionalProperties: true
                  success:
                    type: boolean

    post:
      summary: Set app data
      description: Store data in your app's storage
      tags:
        - Storage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [key, value]
              properties:
                key:
                  type: string
                  description: Storage key
                value:
                  type: object
                  description: Data to store
                  additionalProperties: true
      responses:
        '200':
          description: Data stored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      key:
                        type: string
                  success:
                    type: boolean

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key authentication using Bearer token

  schemas:
    Entry:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        sections:
          type: array
          items:
            $ref: '#/components/schemas/Section'
        template:
          $ref: '#/components/schemas/Template'
        audience:
          type: string
          enum: [public, private, shared]
        status:
          type: string
          enum: [draft, scheduled, published]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        userId:
          type: string

    Section:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        content:
          type: string
        order:
          type: integer

    Template:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        category:
          type: string
        sections:
          type: array
          items:
            $ref: '#/components/schemas/TemplateSection'
        isPublic:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        userId:
          type: string

    TemplateSection:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        title:
          type: string
        content:
          type: string
        order:
          type: integer

    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        displayName:
          type: string
        email:
          type: string
        bio:
          type: string
        location:
          type: string
        website:
          type: string
        avatar:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateEntryRequest:
      type: object
      required: [title]
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        content:
          type: string
        sections:
          type: array
          items:
            type: object
        templateId:
          type: string
        audience:
          type: string
          enum: [public, private, shared]
          default: private
        status:
          type: string
          enum: [draft, scheduled, published]
          default: draft

    UpdateEntryRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        content:
          type: string
        sections:
          type: array
          items:
            type: object
        audience:
          type: string
          enum: [public, private, shared]
        status:
          type: string
          enum: [draft, scheduled, published]

    CreateTemplateRequest:
      type: object
      required: [name, description]
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
        sections:
          type: array
          items:
            $ref: '#/components/schemas/TemplateSection'
        isPublic:
          type: boolean
          default: false

    UpdateTemplateRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        category:
          type: string
        sections:
          type: array
          items:
            $ref: '#/components/schemas/TemplateSection'
        isPublic:
          type: boolean

    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
        displayName:
          type: string
        bio:
          type: string
        location:
          type: string
        website:
          type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        totalPages:
          type: integer

    # Profile schemas
    Profile:
      type: object
      description: |
        **üîí Privacy-Protected Profile Data**
        
        Profile data is carefully sanitized to protect user privacy:
        - `profileId`: Sanitized ID with `ext_` prefix, cannot be linked to internal Oriva Core data
        - `profileName`: User-defined display name only, no internal identifiers
        - `isActive`: Current active status, no historical information
        - No creation dates, internal IDs, or linking information is exposed
      properties:
        profileId:
          type: string
          pattern: '^ext_[a-f0-9]{16}$'
          description: |
            Sanitized profile ID for external use. 
            **Privacy**: Cannot be reversed to internal Oriva Core ID, prefixed with `ext_` for security
          example: 'ext_1234567890abcdef'
        profileName:
          type: string
          description: |
            Display name of the profile as defined by the user.
            **Privacy**: Only user-defined display name, no internal usernames or identifiers
          example: 'Dating Profile'
        isActive:
          type: boolean
          description: |
            Whether this profile is currently active for this extension session.
            **Privacy**: Current status only, no historical switching information
          example: true
      required:
        - profileId
        - profileName
        - isActive

    # Group schemas
    Group:
      type: object
      description: |
        **üîí Privacy-Protected Group Data**
        
        Group data is carefully sanitized to protect user privacy:
        - `groupId`: Sanitized ID with `ext_` prefix, cannot be linked to internal Oriva Core data
        - `groupName`: User-defined display name only, no internal identifiers
        - `memberCount`: Total count only, no individual member information
        - No ownership, creation dates, or administrative information is exposed
      properties:
        groupId:
          type: string
          pattern: '^ext_[a-f0-9]{16}$'
          description: |
            Sanitized group ID for external use.
            **Privacy**: Cannot be reversed to internal Oriva Core ID, prefixed with `ext_` for security
          example: 'ext_9876543210fedcba'
        groupName:
          type: string
          description: |
            Display name of the group as defined by the group creator.
            **Privacy**: Only user-defined display name, no internal identifiers
          example: 'Work Team Alpha'
        memberCount:
          type: integer
          description: |
            Total number of members in the group.
            **Privacy**: Count only, no individual member information or identities
          example: 5
        isActive:
          type: boolean
          description: |
            Whether the group is currently active and accessible.
            **Privacy**: Current status only, no historical information
          example: true
      required:
        - groupId
        - groupName
        - memberCount
        - isActive

    GroupMember:
      type: object
      description: |
        **üîí Privacy-Protected Group Member Data**
        
        Group member data is carefully sanitized to protect user privacy:
        - `memberId`: Sanitized ID with `ext_member_` prefix, cannot be linked to user accounts
        - `displayName`: Only display name shown, no usernames or internal identifiers
        - `role`: Group role only, no administrative privileges or permissions
        - `joinedAt`: Join date only, no other temporal information
        - No information that could link members to user accounts or other profiles
      properties:
        memberId:
          type: string
          pattern: '^ext_member_[a-f0-9]{10}$'
          description: |
            Sanitized member ID for external use.
            **Privacy**: Cannot be linked to user accounts or internal Oriva Core data, prefixed with `ext_member_` for security
          example: 'ext_member_1234567890'
        displayName:
          type: string
          description: |
            Display name of the member as shown in the group.
            **Privacy**: Only display name, no usernames, emails, or internal identifiers
          example: 'Alex Johnson'
        role:
          type: string
          enum: [admin, moderator, member]
          description: |
            Role of the member in the group.
            **Privacy**: Group role only, no administrative privileges or system permissions
          example: 'admin'
        joinedAt:
          type: string
          format: date-time
          description: |
            When the member joined the group.
            **Privacy**: Join date only, no other temporal information or activity data
          example: '2024-01-15T10:00:00Z'
      required:
        - memberId
        - displayName
        - role
        - joinedAt

  responses:
    BadRequest:
      description: Bad request - invalid input data
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    Unauthorized:
      description: Unauthorized - invalid or missing authentication
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    Forbidden:
      description: Forbidden - insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    RateLimitExceeded:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
              retryAfter:
                type: integer

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

tags:
  - name: System
    description: System health and status
  - name: Developer
    description: Developer tools and API key management
  - name: Entries
    description: Entry management operations
  - name: Templates
    description: Template management operations
  - name: User
    description: User information and profile management
  - name: Profiles
    description: Multi-profile management for privacy-first extensions
  - name: Groups
    description: Group membership and management operations
  - name: UI
    description: User interface interactions
  - name: Storage
    description: App data storage operations

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key authentication using Bearer token
    AdminTokenAuth:
      type: apiKey
      in: header
      name: X-Admin-Token
      description: Admin token for developer endpoints