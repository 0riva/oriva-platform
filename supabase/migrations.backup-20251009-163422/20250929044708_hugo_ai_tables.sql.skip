-- Hugo AI Memory and Knowledge Base Tables
-- Aligns with Hugo_AI-Vision.md requirements

-- Enable pgvector extension for embeddings
CREATE EXTENSION IF NOT EXISTS vector;

-- Main collaboration memory table for user-specific data
CREATE TABLE IF NOT EXISTS hugo_collaboration_memory (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id TEXT NOT NULL,
  app_id TEXT NOT NULL, -- e.g., 'hugo_matchmaker', 'hugo_core'
  context_type TEXT NOT NULL, -- 'life_goals', 'fears', 'skills', 'core_values', 'life_lessons', 'lifestyle_preferences', 'conversation', 'insight'

  -- Structured user data in JSONB
  content JSONB NOT NULL,

  -- Vector embedding for semantic search (optional)
  content_embedding vector(768), -- OpenAI ada-002 dimension

  -- Metadata including Hugo's tag system
  metadata JSONB DEFAULT '{}', -- Includes tags: Choice, Direction, Order, Priority, Harmony, Synergy, Contribution

  -- Privacy and sharing controls
  privacy_level TEXT DEFAULT 'private' CHECK (privacy_level IN ('private', 'app_shared', 'core_shared', 'public')),
  shared_with_core BOOLEAN DEFAULT FALSE,

  -- Timestamps and retention
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  expires_at TIMESTAMPTZ -- NULL for indefinite retention (life goals, core values)
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_user_context ON hugo_collaboration_memory (user_id, context_type);
CREATE INDEX IF NOT EXISTS idx_app_user ON hugo_collaboration_memory (app_id, user_id);
CREATE INDEX IF NOT EXISTS idx_created_at ON hugo_collaboration_memory (created_at DESC);
CREATE INDEX IF NOT EXISTS idx_expires_at ON hugo_collaboration_memory (expires_at);
CREATE INDEX IF NOT EXISTS idx_metadata_tags ON hugo_collaboration_memory USING gin ((metadata->'tags') jsonb_path_ops);

-- User profile schema for structured data sets
CREATE TABLE IF NOT EXISTS hugo_user_profiles (
  user_id TEXT PRIMARY KEY,

  -- Core user-specific data sets
  life_goals JSONB DEFAULT '[]', -- Array of goals with priority, timestamps
  fears JSONB DEFAULT '[]', -- Array of fears with severity, context
  skill_set JSONB DEFAULT '[]', -- Array of skills with proficiency levels
  core_values JSONB DEFAULT '[]', -- Array of value strings
  life_lessons JSONB DEFAULT '[]', -- Array of lessons with timestamps
  lifestyle_preferences JSONB DEFAULT '{}', -- Object with preferences

  -- Cognitive profile
  cognitive_profile JSONB DEFAULT '{}', -- strengths, growth_areas, learning_velocity

  -- Privacy settings
  data_sharing_consent JSONB DEFAULT '{}', -- Per data type consent

  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- AI-generated insights and learning data
CREATE TABLE IF NOT EXISTS hugo_learning_data (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  session_id TEXT NOT NULL,
  user_id TEXT NOT NULL,
  domain TEXT NOT NULL, -- CognitiveDomain enum values

  -- Interaction data
  interaction_data JSONB NOT NULL,

  -- Outcome and feedback
  outcome_data JSONB,
  feedback_data JSONB,

  -- Learning metrics
  processing_time INTEGER, -- milliseconds
  model_version TEXT,
  confidence FLOAT,

  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for learning data
CREATE INDEX IF NOT EXISTS idx_user_session ON hugo_learning_data (user_id, session_id);
CREATE INDEX IF NOT EXISTS idx_domain ON hugo_learning_data (domain);
CREATE INDEX IF NOT EXISTS idx_created_learning ON hugo_learning_data (created_at DESC);

-- User insights generated by Hugo AI
CREATE TABLE IF NOT EXISTS hugo_user_insights (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id TEXT NOT NULL,

  -- Insight details
  domain TEXT NOT NULL,
  insight_type TEXT NOT NULL, -- 'pattern', 'recommendation', 'bias_detection', 'goal_alignment'

  title TEXT NOT NULL,
  description TEXT NOT NULL,

  -- Significance and impact
  significance TEXT CHECK (significance IN ('low', 'medium', 'high', 'critical')),
  priority TEXT CHECK (priority IN ('low', 'medium', 'high', 'urgent')),
  estimated_impact TEXT CHECK (estimated_impact IN ('minimal', 'moderate', 'significant', 'transformative')),

  -- Evidence and metadata
  evidence JSONB DEFAULT '[]',
  metadata JSONB DEFAULT '{}',

  -- Timestamps
  created_at TIMESTAMPTZ DEFAULT NOW(),
  expires_at TIMESTAMPTZ -- For temporary insights
);

-- Create indexes for insights
CREATE INDEX IF NOT EXISTS idx_user_insights ON hugo_user_insights (user_id, created_at DESC);
CREATE INDEX IF NOT EXISTS idx_domain_insights ON hugo_user_insights (domain, insight_type);

-- Analysis results from deep cognitive processing
CREATE TABLE IF NOT EXISTS hugo_analysis_results (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id TEXT NOT NULL,
  analysis_type TEXT NOT NULL,

  -- Analysis data
  analysis_data JSONB NOT NULL,

  -- Performance metrics
  processing_time INTEGER,
  analysis_depth TEXT,

  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for analysis results
CREATE INDEX IF NOT EXISTS idx_user_analysis ON hugo_analysis_results (user_id, created_at DESC);

-- User progress tracking across cognitive domains
CREATE TABLE IF NOT EXISTS hugo_user_progress (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id TEXT NOT NULL,
  domain TEXT NOT NULL,

  -- Progress metrics
  metrics JSONB NOT NULL, -- domain-specific metrics
  milestones JSONB DEFAULT '[]', -- achieved milestones

  -- Growth tracking
  progress_percentage FLOAT,
  growth_rate FLOAT,

  timestamp TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for progress tracking
CREATE INDEX IF NOT EXISTS idx_user_progress ON hugo_user_progress (user_id, domain, timestamp DESC);

-- External knowledge sources integration
-- Check if table exists and has the right structure
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'hugo_knowledge_base') THEN
    CREATE TABLE hugo_knowledge_base (
      id UUID PRIMARY KEY DEFAULT gen_random_uuid(),

      -- Knowledge categorization
      category TEXT NOT NULL,
      source TEXT NOT NULL,

      -- Content
      title TEXT NOT NULL,
      content JSONB NOT NULL,

      -- Embeddings for semantic search
      content_embedding vector(768),

      -- Metadata and versioning
      metadata JSONB DEFAULT '{}',
      version TEXT DEFAULT '1.0.0',

      created_at TIMESTAMPTZ DEFAULT NOW(),
      updated_at TIMESTAMPTZ DEFAULT NOW()
    );
  ELSE
    -- Add missing columns if they don't exist
    ALTER TABLE hugo_knowledge_base ADD COLUMN IF NOT EXISTS source TEXT;
    ALTER TABLE hugo_knowledge_base ADD COLUMN IF NOT EXISTS content_embedding vector(768);
    ALTER TABLE hugo_knowledge_base ADD COLUMN IF NOT EXISTS version TEXT DEFAULT '1.0.0';
  END IF;
END $$;

-- Create indexes for knowledge base (if they don't exist)
CREATE INDEX IF NOT EXISTS idx_category ON hugo_knowledge_base (category);
CREATE INDEX IF NOT EXISTS idx_knowledge_created ON hugo_knowledge_base (created_at DESC);

-- Row-level security policies
ALTER TABLE hugo_collaboration_memory ENABLE ROW LEVEL SECURITY;
ALTER TABLE hugo_user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE hugo_learning_data ENABLE ROW LEVEL SECURITY;
ALTER TABLE hugo_user_insights ENABLE ROW LEVEL SECURITY;
ALTER TABLE hugo_analysis_results ENABLE ROW LEVEL SECURITY;
ALTER TABLE hugo_user_progress ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for user data isolation
CREATE POLICY "Users can view their own memories"
  ON hugo_collaboration_memory FOR SELECT
  USING (user_id = auth.uid() OR privacy_level IN ('public', 'core_shared'));

CREATE POLICY "Users can insert their own memories"
  ON hugo_collaboration_memory FOR INSERT
  WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update their own memories"
  ON hugo_collaboration_memory FOR UPDATE
  USING (user_id = auth.uid());

CREATE POLICY "Users can view their own profile"
  ON hugo_user_profiles FOR ALL
  USING (user_id = auth.uid());

-- Function to update timestamps
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers for auto-updating timestamps (idempotent)
DROP TRIGGER IF EXISTS update_hugo_collaboration_memory_updated_at ON hugo_collaboration_memory;
CREATE TRIGGER update_hugo_collaboration_memory_updated_at
  BEFORE UPDATE ON hugo_collaboration_memory
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_hugo_user_profiles_updated_at ON hugo_user_profiles;
CREATE TRIGGER update_hugo_user_profiles_updated_at
  BEFORE UPDATE ON hugo_user_profiles
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_hugo_knowledge_base_updated_at ON hugo_knowledge_base;
CREATE TRIGGER update_hugo_knowledge_base_updated_at
  BEFORE UPDATE ON hugo_knowledge_base
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Sample data for Hugo's tag system (from vision doc)
-- Note: Commenting out sample data insert due to schema mismatch
-- This can be added later once we verify the table structure